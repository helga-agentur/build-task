/* Main integration test: Executes gulpFiles and checks created output */

const test = require('ava');
const util = require('util');
const exec = util.promisify(require('child_process').exec);
const dirTree = require('directory-tree');

/**
 * Takes a tree created by directory-tree and outputs it as a simple array-based structure (see
 * tests)
 * @param  {object} dirTree   Tree generated by directory-tree
 * @return {Array}            Simplified array-based tree
 */
function reformatTree(dirTreeStructure, parent) {
    dirTreeStructure.forEach((item) => {
        if (item.children) {
            parent.push(item.name, reformatTree(item.children, []));
        } else {
            parent.push(item.name);
        }
    });
    return parent;
}

const expectations = new Map([
    ['gulpfile.absolutePath.js', [
        'css', [
            'main.css', 'main.css.map',
        ],
        'html', [
            'index.html',
        ],
        'js', [
            'main.js', 'main.js.map',
        ],
    ]],
    ['gulpfile.absoluteMultipleEntries.js', [
        'js', [
            // Entries are a simple array and not a named object, therefore only one file will
            // be exported
            'main.js', 'main.js.map',
        ],
    ]],
    ['gulpfile.default.js', [
        'css', [
            'main.css', 'main.css.map',
        ],
        'html', [
            'index.html',
        ],
        'js', [
            'main.js', 'main.js.map',
        ],
    ]],
    ['gulpfile.multi.js', [
        'css', [
            'main.css',
            'main.css.map',
            'sub-folder',
            ['otherFile.css', 'otherFile.css.map'],
        ],
        'html', [
            'index.html',
        ],
        'js', [
            'main.js', 'main.js.map',
        ],
    ]],
    ['gulpfile.multiNamed.js', [
        'html', [
            'index.html',
        ],
        'js', [
            'base.js', 'base.js.map', 'other.js', 'other.js.map',
        ],
    ]],
    ['gulpfile.react.js', [
        'html', [
            'index.html',
        ],
        'js', [
            'main.js', 'main.js.map',
        ],
    ]],
]);

test('creates files', async(t) => {
    for (const [gulpfile, expectation] of expectations) {
        console.log('gulpfile used is', gulpfile);
        // Only execute prod task as dev/default tasks create a watcher, process won't end
        await exec(`npx gulp prod -f ./test/${gulpfile}`);
        const tree = dirTree('./test/dist/');
        const reformatted = reformatTree(tree.children, []);
        t.deepEqual(reformatted, expectation);
    }
});
